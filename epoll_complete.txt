EPOLL(7)                                                Linux Programmer's Manual                                               EPOLL(7)

NAME
       epoll - I/O event notification facility

SYNOPSIS
       #include <sys/epoll.h>

DESCRIPTION
       The  epoll API performs a similar task to poll(2): monitoring multiple file descriptors to see if I/O is possible on any of them.
       The epoll API can be used either as an edge-triggered or a level-triggered interface and scales well to large numbers of  watched
       file descriptors.  The following system calls are provided to create and manage an epoll instance:

       *  epoll_create(2)  creates  an  epoll  instance  and  returns  a  file  descriptor referring to that instance.  (The more recent
          epoll_create1(2) extends the functionality of epoll_create(2).)

       *  Interest in particular file descriptors is then registered via epoll_ctl(2).  The set of file descriptors currently registered
          on an epoll instance is sometimes called an epoll set.

       *  epoll_wait(2) waits for I/O events, blocking the calling thread if no events are currently available.

   Level-triggered and edge-triggered
       The epoll event distribution interface is able to behave both as edge-triggered (ET) and as level-triggered (LT).  The difference
       between the two mechanisms can be described as follows.  Suppose that this scenario happens:

       1. The file descriptor that represents the read side of a pipe (rfd) is registered on the epoll instance.

       2. A pipe writer writes 2 kB of data on the write side of the pipe.

       3. A call to epoll_wait(2) is done that will return rfd as a ready file descriptor.

       4. The pipe reader reads 1 kB of data from rfd.

       5. A call to epoll_wait(2) is done.

       If the rfd file descriptor has been added  to  the  epoll  interface  using  the  EPOLLET  (edge-triggered)  flag,  the  call  to
       epoll_wait(2)  done in step 5 will probably hang despite the available data still present in the file input buffer; meanwhile the
       remote peer might be expecting a response based on the data it already sent.  The reason for this  is  that  edge-triggered  mode
       delivers events only when changes occur on the monitored file descriptor.  So, in step 5 the caller might end up waiting for some
       data that is already present inside the input buffer.  In the above example, an event on rfd will be  generated  because  of  the
       write  done  in 2 and the event is consumed in 3.  Since the read operation done in 4 does not consume the whole buffer data, the
       call to epoll_wait(2) done in step 5 might block indefinitely.

       An application that employs the EPOLLET flag should use nonblocking file descriptors to avoid having a  blocking  read  or  write
       starve  a  task that is handling multiple file descriptors.  The suggested way to use epoll as an edge-triggered (EPOLLET) inter‐
       face is as follows:

              i   with nonblocking file descriptors; and

              ii  by waiting for an event only after read(2) or write(2) return EAGAIN.

       By contrast, when used as a level-triggered interface (the default, when EPOLLET is not specified),  epoll  is  simply  a  faster
       poll(2), and can be used wherever the latter is used since it shares the same semantics.

       Since  even  with  edge-triggered epoll, multiple events can be generated upon receipt of multiple chunks of data, the caller has
       the option to specify the EPOLLONESHOT flag, to tell epoll to disable the associated file descriptor  after  the  receipt  of  an
       event  with epoll_wait(2).  When the EPOLLONESHOT flag is specified, it is the caller's responsibility to rearm the file descrip‐
       tor using epoll_ctl(2) with EPOLL_CTL_MOD.

   Interaction with autosleep
       If the system is in autosleep mode via /sys/power/autosleep and an event happens which wakes the device from  sleep,  the  device
       driver  will keep the device awake only until that event is queued.  To keep the device awake until the event has been processed,
       it is necessary to use the epoll(7) EPOLLWAKEUP flag.

       When the EPOLLWAKEUP flag is set in the events field for a struct epoll_event, the system will be kept awake from the moment  the
       event  is  queued,  through the epoll_wait(2) call which returns the event until the subsequent epoll_wait(2) call.  If the event
       should keep the system awake beyond that time, then a separate wake_lock should be taken before the second epoll_wait(2) call.

   /proc interfaces
       The following interfaces can be used to limit the amount of kernel memory consumed by epoll:

       /proc/sys/fs/epoll/max_user_watches (since Linux 2.6.28)
              This specifies a limit on the total number of file descriptors that a user can register across all epoll instances on  the
              system.   The  limit  is per real user ID.  Each registered file descriptor costs roughly 90 bytes on a 32-bit kernel, and
              roughly 160 bytes on a 64-bit kernel.  Currently, the default value for max_user_watches is 1/25 (4%) of the available low
              memory, divided by the registration cost in bytes.

   Example for suggested usage
       While the usage of epoll when employed as a level-triggered interface does have the same semantics as poll(2), the edge-triggered
       usage requires more clarification to avoid stalls in the application event loop.  In this  example,  listener  is  a  nonblocking
       socket  on which listen(2) has been called.  The function do_use_fd() uses the new ready file descriptor until EAGAIN is returned
       by either read(2) or write(2).  An event-driven state machine application should, after having received EAGAIN, record  its  cur‐
       rent state so that at the next call to do_use_fd() it will continue to read(2) or write(2) from where it stopped before.

           #define MAX_EVENTS 10
           struct epoll_event ev, events[MAX_EVENTS];

	   /*
	   The struct epoll_event is defined as:

           typedef union epoll_data {
               void    *ptr;
               int      fd;
               uint32_t u32;
               uint64_t u64;
           } epoll_data_t;

           struct epoll_event {
               uint32_t     events;    /* Epoll events */
               epoll_data_t data;      /* User data variable */
           };

	   The  data  of each returned structure will contain the same data the user set with an epoll_ctl(2) (EPOLL_CTL_ADD, EPOLL_CTL_MOD)
           while the events member will contain the returned event bit field.
	   */

           int listen_sock, conn_sock, nfds, epollfd;

           /* Code to set up listening socket, 'listen_sock',
              (socket(), bind(), listen()) omitted */

	   /*Create epoll and assign fd to epollfd*/
           epollfd = epoll_create1(0);
           if (epollfd == -1) {
               perror("epoll_create1");
               exit(EXIT_FAILURE);
           }

	   /*Configure event struct to add to epoll instance*/
	   /*Set bitmask to handle inputs only*/
           ev.events = EPOLLIN;
	   /*Set file descriptor to watch as the socket to listen for incoming connections*/
           ev.data.fd = listen_sock;
	   /*Modifies epollfd by adding the listening file descriptor and associating the event struct ev with it*/
           if (epoll_ctl(epollfd, EPOLL_CTL_ADD, listen_sock, &ev) == -1) {
               perror("epoll_ctl: listen_sock");
               exit(EXIT_FAILURE);
           }

	   /*Begin taking connections*/
           for (;;) {
	       /*Check if any file descriptors being watched by epollfd need attention, with the events available to the caller located in 			events (epoll_wait will put them in this array?), returning maxmim of MAX_EVENTS, hanging indefinitely until this is true. 			When true it returns the total number of events to be handled*/
               nfds = epoll_wait(epollfd, events, MAX_EVENTS, -1);
               if (nfds == -1) {
                   perror("epoll_wait");
                   exit(EXIT_FAILURE);
               }

	       /*Iterate over events and find the one with an associated file descriptor that matches the listening socket*/
               for (n = 0; n < nfds; ++n) {
		   /*If the listening file descriptor is in the array of events, create a new socket to accept a connection to client...*/
                   if (events[n].data.fd == listen_sock) {
                       conn_sock = accept(listen_sock,
                                       (struct sockaddr *) &local, &addrlen);
                       if (conn_sock == -1) {
                           perror("accept");
                           exit(EXIT_FAILURE);
                       }
		       /*...set it to non-blocking and change the event's modes to read and changes the event to edge triggered...*/
                       setnonblocking(conn_sock);
                       ev.events = EPOLLIN | EPOLLET;
		       /*...Change the event's associated file descriptor to the connected client socket...*/
                       ev.data.fd = conn_sock;
		       /*...Add client socket and new version of event to the epoll's watchlist... must copy the data in ev rather than 		       reference it?*/
                       if (epoll_ctl(epollfd, EPOLL_CTL_ADD, conn_sock,
                                   &ev) == -1) {
                           perror("epoll_ctl: conn_sock");
                           exit(EXIT_FAILURE);
                       }
		     /*A client socket as an event we need to handle. This section is whatever you want to to do handle an established 			     connection.*/
                   } else {
                       do_use_fd(events[n].data.fd);
                   }
               }
           }

       When  used  as  an  edge-triggered interface, for performance reasons, it is possible to add the file descriptor inside the epoll
       interface (EPOLL_CTL_ADD) once by specifying (EPOLLIN|EPOLLOUT).  This allows you to avoid continuously switching between EPOLLIN
       and EPOLLOUT calling epoll_ctl(2) with EPOLL_CTL_MOD.

   Questions and answers
       Q0  What is the key used to distinguish the file descriptors registered in an epoll set?

       A0  The  key is the combination of the file descriptor number and the open file description (also known as an "open file handle",
           the kernel's internal representation of an open file).

       Q1  What happens if you register the same file descriptor on an epoll instance twice?

       A1  You will probably get EEXIST.  However, it is possible to add a duplicate (dup(2), dup2(2), fcntl(2) F_DUPFD)  descriptor  to
           the  same  epoll instance.  This can be a useful technique for filtering events, if the duplicate file descriptors are regis‐
           tered with different events masks.

       Q2  Can two epoll instances wait for the same file descriptor?  If so, are events reported to both epoll file descriptors?

       A2  Yes, and events would be reported to both.  However, careful programming may be needed to do this correctly.

       Q3  Is the epoll file descriptor itself poll/epoll/selectable?

       A3  Yes.  If an epoll file descriptor has events waiting, then it will indicate as being readable.

       Q4  What happens if one attempts to put an epoll file descriptor into its own file descriptor set?

       A4  The epoll_ctl(2) call will fail (EINVAL).  However, you can add an epoll file descriptor inside another epoll file descriptor
           set.

       Q5  Can I send an epoll file descriptor over a UNIX domain socket to another process?

       A5  Yes,  but it does not make sense to do this, since the receiving process would not have copies of the file descriptors in the
           epoll set.

       Q6  Will closing a file descriptor cause it to be removed from all epoll sets automatically?

       A6  Yes, but be aware of the following point.  A file descriptor is a reference to an open file description (see open(2)).  When‐
           ever  a  descriptor  is  duplicated via dup(2), dup2(2), fcntl(2) F_DUPFD, or fork(2), a new file descriptor referring to the
           same open file description is created.  An open file description continues to exist until all file descriptors  referring  to
           it  have  been  closed.   A file descriptor is removed from an epoll set only after all the file descriptors referring to the
           underlying open file description have been closed (or before if the  descriptor  is  explicitly  removed  using  epoll_ctl(2)
           EPOLL_CTL_DEL).   This  means  that  even after a file descriptor that is part of an epoll set has been closed, events may be
           reported for that file descriptor if other file descriptors referring to the same underlying file description remain open.

       Q7  If more than one event occurs between epoll_wait(2) calls, are they combined or reported separately?

       A7  They will be combined.

       Q8  Does an operation on a file descriptor affect the already collected but not yet reported events?

       A8  You can do two operations on an existing file descriptor.  Remove would be meaningless for this  case.   Modify  will  reread
           available I/O.

       Q9  Do I need to continuously read/write a file descriptor until EAGAIN when using the EPOLLET flag (edge-triggered behavior) ?

       A9  Receiving  an  event from epoll_wait(2) should suggest to you that such file descriptor is ready for the requested I/O opera‐
           tion.  You must consider it ready until the next (nonblocking) read/write yields EAGAIN.  When and how you will use the  file
           descriptor is entirely up to you.

           For  packet/token-oriented  files  (e.g., datagram socket, terminal in canonical mode), the only way to detect the end of the
           read/write I/O space is to continue to read/write until EAGAIN.

           For stream-oriented files (e.g., pipe, FIFO, stream socket), the condition that the read/write I/O  space  is  exhausted  can
           also  be detected by checking the amount of data read from / written to the target file descriptor.  For example, if you call
           read(2) by asking to read a certain amount of data and read(2) returns a lower number of bytes, you can  be  sure  of  having
           exhausted  the  read  I/O  space  for the file descriptor.  The same is true when writing using write(2).  (Avoid this latter
           technique if you cannot guarantee that the monitored file descriptor always refers to a stream-oriented file.)

   Possible pitfalls and ways to avoid them
       o Starvation (edge-triggered)

       If there is a large amount of I/O space, it is possible that by trying to drain it the other files will not get processed causing
       starvation.  (This problem is not specific to epoll.)

       The solution is to maintain a ready list and mark the file descriptor as ready in its associated data structure, thereby allowing
       the application to remember which files need to be processed but still round robin amongst all the ready files.  This  also  sup‐
       ports ignoring subsequent events you receive for file descriptors that are already ready.

       o If using an event cache...

       If  you use an event cache or store all the file descriptors returned from epoll_wait(2), then make sure to provide a way to mark
       its closure dynamically (i.e., caused by a previous event's processing).  Suppose you receive 100 events from epoll_wait(2),  and
       in  event  #47 a condition causes event #13 to be closed.  If you remove the structure and close(2) the file descriptor for event
       #13, then your event cache might still say there are events waiting for that file descriptor causing confusion.

       One solution for this is to call, during the processing of event 47, epoll_ctl(EPOLL_CTL_DEL) to delete file  descriptor  13  and
       close(2),  then  mark its associated data structure as removed and link it to a cleanup list.  If you find another event for file
       descriptor 13 in your batch processing, you will discover the file descriptor had been previously removed and there  will  be  no
       confusion.

VERSIONS
       The epoll API was introduced in Linux kernel 2.5.44.  Support was added to glibc in version 2.3.2.

CONFORMING TO
       The epoll API is Linux-specific.  Some other systems provide similar mechanisms, for example, FreeBSD has kqueue, and Solaris has
       /dev/poll.

SEE ALSO
       epoll_create(2), epoll_create1(2), epoll_ctl(2), epoll_wait(2), poll(2), select(2)

COLOPHON
       This page is part of release 4.04 of the Linux man-pages project.  A description of  the  project,  information  about  reporting
       bugs, and the latest version of this page, can be found at http://www.kernel.org/doc/man-pages/.
----------------------------------------------------------------------------------------------------------------------------------------
Linux                                                          2015-04-19                                                       EPOLL(7)
EPOLL_CREATE(2)                                         Linux Programmer's Manual                                        EPOLL_CREATE(2)

NAME
       epoll_create, epoll_create1 - open an epoll file descriptor

SYNOPSIS
       #include <sys/epoll.h>

       int epoll_create(int size);
       int epoll_create1(int flags);

DESCRIPTION
       epoll_create() creates an epoll(7) instance.  Since Linux 2.6.8, the size argument is ignored, but must be greater than zero; see
       NOTES below.

       epoll_create() returns a file descriptor referring to the new epoll instance.  This file descriptor is used for  all  the  subse‐
       quent  calls to the epoll interface.  When no longer required, the file descriptor returned by epoll_create() should be closed by
       using close(2).  When all file descriptors referring to an epoll instance have been closed, the kernel destroys the instance  and
       releases the associated resources for reuse.

   epoll_create1()
       If  flags  is  0, then, other than the fact that the obsolete size argument is dropped, epoll_create1() is the same as epoll_cre‐
       ate().  The following value can be included in flags to obtain different behavior:

       EPOLL_CLOEXEC
              Set the close-on-exec (FD_CLOEXEC) flag on the new file descriptor.  See the description of the O_CLOEXEC flag in  open(2)
              for reasons why this may be useful.

RETURN VALUE
       On  success, these system calls return a nonnegative file descriptor.  On error, -1 is returned, and errno is set to indicate the
       error.

ERRORS
       EINVAL size is not positive.

       EINVAL (epoll_create1()) Invalid value specified in flags.

       EMFILE The per-user limit on the number of epoll instances imposed by /proc/sys/fs/epoll/max_user_instances was encountered.  See
              epoll(7) for further details.

       EMFILE The per-process limit on the number of open file descriptors has been reached.

       ENFILE The system-wide limit on the total number of open files has been reached.

       ENOMEM There was insufficient memory to create the kernel object.

VERSIONS
       epoll_create() was added to the kernel in version 2.6.  Library support is provided in glibc starting with version 2.3.2.

       epoll_create1() was added to the kernel in version 2.6.27.  Library support is provided in glibc starting with version 2.9.

CONFORMING TO
       epoll_create() is Linux-specific.

NOTES
       In  the  initial  epoll_create() implementation, the size argument informed the kernel of the number of file descriptors that the
       caller expected to add to the epoll instance.  The kernel used this information as a hint for the amount of  space  to  initially
       allocate  in  internal  data  structures  describing events.  (If necessary, the kernel would allocate more space if the caller's
       usage exceeded the hint given in size.)  Nowadays, this hint is no longer required (the kernel  dynamically  sizes  the  required
       data  structures  without  needing the hint), but size must still be greater than zero, in order to ensure backward compatibility
       when new epoll applications are run on older kernels.

SEE ALSO
       close(2), epoll_ctl(2), epoll_wait(2), epoll(7)

COLOPHON
       This page is part of release 4.04 of the Linux man-pages project.  A description of  the  project,  information  about  reporting
       bugs, and the latest version of this page, can be found at http://www.kernel.org/doc/man-pages/.
----------------------------------------------------------------------------------------------------------------------------------------
Linux                                                          2015-12-28                                                EPOLL_CREATE(2)
EPOLL_CTL(2)                                            Linux Programmer's Manual                                           EPOLL_CTL(2)

NAME
       epoll_ctl - control interface for an epoll descriptor

SYNOPSIS
       #include <sys/epoll.h>

       int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);

DESCRIPTION
       This  system call performs control operations on the epoll(7) instance referred to by the file descriptor epfd.  It requests that
       the operation op be performed for the target file descriptor, fd.

       Valid values for the op argument are:

       EPOLL_CTL_ADD
              Register the target file descriptor fd on the epoll instance referred to by the file descriptor  epfd  and  associate  the
              event event with the internal file linked to fd.

       EPOLL_CTL_MOD
              Change the event event associated with the target file descriptor fd.

       EPOLL_CTL_DEL
              Remove  (deregister)  the target file descriptor fd from the epoll instance referred to by epfd.  The event is ignored and
              can be NULL (but see BUGS below).

       The event argument describes the object linked to the file descriptor fd.  The struct epoll_event is defined as:

           typedef union epoll_data {
               void        *ptr;
               int          fd;
               uint32_t     u32;
               uint64_t     u64;
           } epoll_data_t;

           struct epoll_event {
               uint32_t     events;      /* Epoll events */
               epoll_data_t data;        /* User data variable */
           };

       The events member is a bit mask composed using the following available event types:

       EPOLLIN
              The associated file is available for read(2) operations.

       EPOLLOUT
              The associated file is available for write(2) operations.

       EPOLLRDHUP (since Linux 2.6.17)
              Stream socket peer closed connection, or shut down writing half of connection.  (This flag is especially useful for  writ‐
              ing simple code to detect peer shutdown when using Edge Triggered monitoring.)

       EPOLLPRI
              There is urgent data available for read(2) operations.

       EPOLLERR
              Error condition happened on the associated file descriptor.  epoll_wait(2) will always wait for this event; it is not nec‐
              essary to set it in events.

       EPOLLHUP
              Hang up happened on the associated file descriptor.  epoll_wait(2) will always wait for this event; it is not necessary to
              set  it  in  events.  Note that when reading from a channel such as a pipe or a stream socket, this event merely indicates
              that the peer closed its end of the channel.  Subsequent reads from the channel will return 0 (end of file) only after all
              outstanding data in the channel has been consumed.

       EPOLLET
              Sets  the  Edge Triggered behavior for the associated file descriptor.  The default behavior for epoll is Level Triggered.
              See epoll(7) for more detailed information about Edge and Level Triggered event distribution architectures.

       EPOLLONESHOT (since Linux 2.6.2)
              Sets the one-shot behavior for the associated file descriptor.  This  means  that  after  an  event  is  pulled  out  with
              epoll_wait(2)  the  associated  file  descriptor  is internally disabled and no other events will be reported by the epoll
              interface.  The user must call epoll_ctl() with EPOLL_CTL_MOD to rearm the file descriptor with a new event mask.

       EPOLLWAKEUP (since Linux 3.5)
              If EPOLLONESHOT and EPOLLET are clear and the process has the CAP_BLOCK_SUSPEND capability, ensure that  the  system  does
              not enter "suspend" or "hibernate" while this event is pending or being processed.  The event is considered as being "pro‐
              cessed" from the time when it is returned by a call to epoll_wait(2) until the next call  to  epoll_wait(2)  on  the  same
              epoll(7)  file  descriptor,  the  closure  of  that  file  descriptor,  the  removal  of  the  event  file descriptor with
              EPOLL_CTL_DEL, or the clearing of EPOLLWAKEUP for the event file descriptor with EPOLL_CTL_MOD.  See also BUGS.

RETURN VALUE
       When successful, epoll_ctl() returns zero.  When an error occurs, epoll_ctl() returns -1 and errno is set appropriately.

ERRORS
       EBADF  epfd or fd is not a valid file descriptor.

       EEXIST op was EPOLL_CTL_ADD, and the supplied file descriptor fd is already registered with this epoll instance.

       EINVAL epfd is not an epoll file descriptor, or fd is the same as epfd, or the requested operation op is not  supported  by  this
              interface.

       ENOENT op was EPOLL_CTL_MOD or EPOLL_CTL_DEL, and fd is not registered with this epoll instance.

       ENOMEM There was insufficient memory to handle the requested op control operation.

       ENOSPC The  limit  imposed  by /proc/sys/fs/epoll/max_user_watches was encountered while trying to register (EPOLL_CTL_ADD) a new
              file descriptor on an epoll instance.  See epoll(7) for further details.

       EPERM  The target file fd does not support epoll.  This error can occur if fd refers to, for example, a regular file or a  direc‐
              tory.

VERSIONS
       epoll_ctl() was added to the kernel in version 2.6.

CONFORMING TO
       epoll_ctl() is Linux-specific.  Library support is provided in glibc starting with version 2.3.2.

NOTES
       The epoll interface supports all file descriptors that support poll(2).

BUGS
       In  kernel  versions before 2.6.9, the EPOLL_CTL_DEL operation required a non-null pointer in event, even though this argument is
       ignored.  Since Linux 2.6.9, event can be specified as NULL when using EPOLL_CTL_DEL.  Applications that need to be  portable  to
       kernels before 2.6.9 should specify a non-null pointer in event.

       If EPOLLWAKEUP is specified in flags, but the caller does not have the CAP_BLOCK_SUSPEND capability, then the EPOLLWAKEUP flag is
       silently ignored.  This unfortunate behavior is necessary because no validity checks were performed on the flags argument in  the
       original implementation, and the addition of the EPOLLWAKEUP with a check that caused the call to fail if the caller did not have
       the CAP_BLOCK_SUSPEND capability caused a breakage in at least one existing user-space application that happened to randomly (and
       uselessly)  specify this bit.  A robust application should therefore double check that it has the CAP_BLOCK_SUSPEND capability if
       attempting to use the EPOLLWAKEUP flag.

SEE ALSO
       epoll_create(2), epoll_wait(2), poll(2), epoll(7)

COLOPHON
       This page is part of release 4.04 of the Linux man-pages project.  A description of  the  project,  information  about  reporting
       bugs, and the latest version of this page, can be found at http://www.kernel.org/doc/man-pages/.
----------------------------------------------------------------------------------------------------------------------------------------
Linux                                                          2015-05-07                                                   EPOLL_CTL(2)
EPOLL_WAIT(2)                                           Linux Programmer's Manual                                          EPOLL_WAIT(2)

NAME
       epoll_wait, epoll_pwait - wait for an I/O event on an epoll file descriptor

SYNOPSIS
       #include <sys/epoll.h>

       int epoll_wait(int epfd, struct epoll_event *events,
                      int maxevents, int timeout);
       int epoll_pwait(int epfd, struct epoll_event *events,
                      int maxevents, int timeout,
                      const sigset_t *sigmask);

DESCRIPTION
       The  epoll_wait() system call waits for events on the epoll(7) instance referred to by the file descriptor epfd.  The memory area
       pointed to by events will contain the events  that  will  be  available  for  the  caller.   Up  to  maxevents  are  returned  by
       epoll_wait().  The maxevents argument must be greater than zero.

       The timeout argument specifies the number of milliseconds that epoll_wait() will block.  The call will block until either:

       *  a file descriptor delivers an event;

       *  the call is interrupted by a signal handler; or

       *  the timeout expires.

       Note  that  the  timeout  interval will be rounded up to the system clock granularity, and kernel scheduling delays mean that the
       blocking interval may overrun by a small amount.  Specifying a timeout of -1 causes epoll_wait()  to  block  indefinitely,  while
       specifying a timeout equal to zero cause epoll_wait() to return immediately, even if no events are available.

       The struct epoll_event is defined as:

           typedef union epoll_data {
               void    *ptr;
               int      fd;
               uint32_t u32;
               uint64_t u64;
           } epoll_data_t;

           struct epoll_event {
               uint32_t     events;    /* Epoll events */
               epoll_data_t data;      /* User data variable */
           };

       The  data  of each returned structure will contain the same data the user set with an epoll_ctl(2) (EPOLL_CTL_ADD, EPOLL_CTL_MOD)
       while the events member will contain the returned event bit field.

   epoll_pwait()
       The relationship between epoll_wait() and epoll_pwait() is analogous to the relationship between select(2) and  pselect(2):  like
       pselect(2),  epoll_pwait() allows an application to safely wait until either a file descriptor becomes ready or until a signal is
       caught.

       The following epoll_pwait() call:

           ready = epoll_pwait(epfd, &events, maxevents, timeout, &sigmask);

       is equivalent to atomically executing the following calls:

           sigset_t origmask;

           pthread_sigmask(SIG_SETMASK, &sigmask, &origmask);
           ready = epoll_wait(epfd, &events, maxevents, timeout);
           pthread_sigmask(SIG_SETMASK, &origmask, NULL);

       The sigmask argument may be specified as NULL, in which case epoll_pwait() is equivalent to epoll_wait().

RETURN VALUE
       When successful, epoll_wait() returns the number of file descriptors ready for the requested I/O, or zero if no  file  descriptor
       became ready during the requested timeout milliseconds.  When an error occurs, epoll_wait() returns -1 and errno is set appropri‐
       ately.

ERRORS
       EBADF  epfd is not a valid file descriptor.

       EFAULT The memory area pointed to by events is not accessible with write permissions.

       EINTR  The call was interrupted by a signal handler before either (1) any of the requested events occurred  or  (2)  the  timeout
              expired; see signal(7).

       EINVAL epfd is not an epoll file descriptor, or maxevents is less than or equal to zero.

VERSIONS
       epoll_wait() was added to the kernel in version 2.6.  Library support is provided in glibc starting with version 2.3.2.

       epoll_pwait() was added to Linux in kernel 2.6.19.  Library support is provided in glibc starting with version 2.6.

CONFORMING TO
       epoll_wait() is Linux-specific.

NOTES
       While one thread is blocked in a call to epoll_pwait(), it is possible for another thread to add a file descriptor to the waited-
       upon epoll instance.  If the new file descriptor becomes ready, it will cause the epoll_wait() call to unblock.

       For a discussion of what may happen if a file descriptor in an epoll instance  being  monitored  by  epoll_wait()  is  closed  in
       another thread, see select(2).

BUGS
       In kernels before 2.6.37, a timeout value larger than approximately LONG_MAX / HZ milliseconds is treated as -1 (i.e., infinity).
       Thus, for example, on a system where the sizeof(long) is 4 and the kernel HZ value is 1000, this means that timeouts greater than
       35.79 minutes are treated as infinity.

   C library/kernel differences
       The raw epoll_pwait() system call has a sixth argument, size_t sigsetsize, which specifies the size in bytes of the sigmask argu‐
       ment.  The glibc epoll_pwait() wrapper function specifies this argument as a fixed value (equal to sizeof(sigset_t)).

SEE ALSO
       epoll_create(2), epoll_ctl(2), epoll(7)

COLOPHON
       This page is part of release 4.04 of the Linux man-pages project.  A description of  the  project,  information  about  reporting
       bugs, and the latest version of this page, can be found at http://www.kernel.org/doc/man-pages/.

Linux                                                          2015-05-07                                                  EPOLL_WAIT(2)
